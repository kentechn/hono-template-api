openapi: 3.0.3
info:
  title: Hono Template API
  description: A REST API for managing todos and users with authentication
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.example.com
    description: Production server

tags:
  - name: auth
    description: Authentication and authorization operations
  - name: users
    description: User management operations
  - name: todos
    description: Todo management operations
  - name: health
    description: Health check operations

paths:
  # Health Check
  /health:
    get:
      tags:
        - health
      summary: Health check
      description: Check if the API is running
      operationId: getHealth
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-07-01T10:00:00Z"
                  uptime:
                    type: number
                    example: 3600

  # Authentication
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Create a new user account
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "password123"
                name:
                  type: string
                  example: "John Doe"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  email:
                    type: string
                    example: "user@example.com"
                  name:
                    type: string
                    example: "John Doe"
                  createdAt:
                    type: string
                    format: date-time
                    example: "2025-07-01T10:00:00Z"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
              example:
                errors:
                  - code: "VALIDATION_ERROR"
                    message: "Email field is required"
                    field: "email"
                  - code: "VALIDATION_ERROR"
                    message: "Password must be at least 8 characters"
                    field: "password"
        "409":
          description: Conflict - user already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
              example:
                error:
                  code: "USER_ALREADY_EXISTS"
                  message: "A user with this email already exists"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
              example:
                error:
                  code: "INTERNAL_ERROR"
                  message: "An unexpected error occurred"

  /auth/login:
    post:
      tags:
        - auth
      summary: Login user
      description: Authenticate user and return access token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: "#/components/schemas/User"
                  expiresIn:
                    type: number
                    example: 3600
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
              example:
                error:
                  code: "INVALID_CREDENTIALS"
                  message: "Invalid email or password"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"

  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout user
      description: Invalidate user session
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        "401":
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
              example:
                error:
                  code: "UNAUTHORIZED"
                  message: "Invalid or missing authentication token"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"

  # Users
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Retrieve a list of all users (admin only)
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  meta:
                    $ref: "#/components/schemas/ListMeta"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
        "403":
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
              example:
                error:
                  code: "FORBIDDEN"
                  message: "Admin access required"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Retrieve a specific user by ID
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
              example:
                error:
                  code: "USER_NOT_FOUND"
                  message: "No user found with the provided ID"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"

    put:
      tags:
        - users
      summary: Update user
      description: Update user information
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Jane Doe"
                email:
                  type: string
                  format: email
                  example: "jane@example.com"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"

    delete:
      tags:
        - users
      summary: Delete user
      description: Delete a user account
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  deletedId:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  success:
                    type: boolean
                    example: true
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"

  /users/me:
    get:
      tags:
        - users
      summary: Get current user profile
      description: Get the profile of the currently authenticated user
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"

  # Todos
  /todos:
    get:
      tags:
        - todos
      summary: Get all todos
      description: Retrieve all todos for the authenticated user
      operationId: getTodos
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
        - name: completed
          in: query
          description: Filter by completion status
          required: false
          schema:
            type: boolean
            example: false
        - name: search
          in: query
          description: Search todos by title or description
          required: false
          schema:
            type: string
            example: "grocery"
      responses:
        "200":
          description: List of todos
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Todo"
                  meta:
                    $ref: "#/components/schemas/ListMeta"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"

    post:
      tags:
        - todos
      summary: Create a new todo
      description: Create a new todo item
      operationId: createTodo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  example: "Buy groceries"
                description:
                  type: string
                  example: "Buy milk, eggs, and bread from the store"
                dueDate:
                  type: string
                  format: date-time
                  example: "2025-07-02T18:00:00Z"
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: "medium"
      responses:
        "201":
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"

  /todos/{id}:
    get:
      tags:
        - todos
      summary: Get todo by ID
      description: Retrieve a specific todo by ID
      operationId: getTodoById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            example: "456e7890-e89b-12d3-a456-426614174001"
      responses:
        "200":
          description: Todo details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
        "404":
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
              example:
                error:
                  code: "TODO_NOT_FOUND"
                  message: "No todo found with the provided ID"

    put:
      tags:
        - todos
      summary: Update todo
      description: Update an existing todo
      operationId: updateTodo
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            example: "456e7890-e89b-12d3-a456-426614174001"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Buy organic groceries"
                description:
                  type: string
                  example: "Buy organic milk, eggs, and whole grain bread"
                completed:
                  type: boolean
                  example: false
                dueDate:
                  type: string
                  format: date-time
                  example: "2025-07-02T18:00:00Z"
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: "high"
      responses:
        "200":
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
        "404":
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"

    delete:
      tags:
        - todos
      summary: Delete todo
      description: Delete a todo item
      operationId: deleteTodo
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            example: "456e7890-e89b-12d3-a456-426614174001"
      responses:
        "200":
          description: Todo deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  deletedId:
                    type: string
                    example: "456e7890-e89b-12d3-a456-426614174001"
                  success:
                    type: boolean
                    example: true
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"
        "404":
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        createdAt:
          type: string
          format: date-time
          example: "2025-07-01T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-07-01T10:00:00Z"

    Todo:
      type: object
      properties:
        id:
          type: string
          example: "456e7890-e89b-12d3-a456-426614174001"
        title:
          type: string
          example: "Buy groceries"
        description:
          type: string
          example: "Buy milk, eggs, and bread from the store"
        completed:
          type: boolean
          example: false
        priority:
          type: string
          enum: [low, medium, high]
          example: "medium"
        dueDate:
          type: string
          format: date-time
          example: "2025-07-02T18:00:00Z"
        userId:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        createdAt:
          type: string
          format: date-time
          example: "2025-07-01T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-07-01T10:00:00Z"

    ListMeta:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total number of items
          example: 50
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Number of items per page
          example: 10
        totalPages:
          type: integer
          description: Total number of pages
          example: 5
        hasNext:
          type: boolean
          description: Whether there is a next page
          example: true
        hasPrev:
          type: boolean
          description: Whether there is a previous page
          example: false

    ValidationError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                description: Error code
                example: "VALIDATION_ERROR"
              message:
                type: string
                description: Error message
                example: "Email field is required"
              field:
                type: string
                description: Field name
                example: "email"

    BusinessError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              example: "UNAUTHORIZED"
            message:
              type: string
              description: Error message
              example: "Invalid credentials"
